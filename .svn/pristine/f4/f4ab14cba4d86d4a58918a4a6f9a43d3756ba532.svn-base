using CanYou.Models.Info.LectureCategory;
using CanYou.Models.Info.LectureCategoryRequirement;
using CanYou.Models.Info.LectureType;
using CanYou.Models.Info.LectureTypeRequirement;
using CanYou.Models.Info.ScoreRequirement;
using CanYou.Models.Info.SectionRequirement;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace CanYou.Controllers
{
    [Authorize]
    public class RequirementController : AbstractController
    {
        //
        // GET: /Requirement/
        public ActionResult Index()
        {
            return View();
        }

        public ActionResult Category()
        {
            IList<LectureCategoryRequirementItem> list = LectureCategoryRequirementDao.FindByAccountId(accountItem.Id);
            ViewBag.list = list;
            return View();
        }

        
        public ActionResult Type()
        {
            IList<LectureTypeRequirementItem> list = LectureTypeRequirementDao.FindByAccountId(accountItem.Id);
            ViewBag.list = list;
            return View();
        }

        public ActionResult Section()
        {
            IList<SectionRequirementItem> list = SectionRequirementDao.FindByAccountId(accountItem.Id);
            ViewBag.list = list;
            return View();
        }

        [HttpGet]

        public ActionResult CategoryRegister()
        {
            IList<LectureCategoryItem> list = LectureCategoryDao.FindAll();
            ViewBag.Category = list;
            return View();
        }

        [HttpPost]
        public ActionResult CategoryRegister(int category, int cutline)
        {
            if (ExistCateogyrRequirement(category)) return Json(new { result = "fail", message = "이미 존재합니다." }, JsonRequestBehavior.AllowGet);

            LectureCategoryRequirementItem item = new LectureCategoryRequirementItem();
            item.LectureCategoryId = category;
            item.Cutline = cutline;
            item.AccountId = accountItem.Id;

            try
            {
                LectureCategoryRequirementDao.Insert(item);
                return Json(new { result = "success" }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { result = "fail", message = ex.Message }, JsonRequestBehavior.AllowGet);
            }

        }

        private bool ExistCateogyrRequirement(int category)
        {
            LectureCategoryRequirementItem item = LectureCategoryRequirementDao.FindByAccountAndCategoryId(accountItem.Id, category);
            return item != null;
        }

        [HttpGet]
        public ActionResult TypeRegister()
        {
            IList<LectureCategoryItem> categoryList = LectureCategoryDao.FindAll();
            ViewBag.Category = categoryList;
            IList<LectureTypeItem> typeList = LectureTypeDao.FindByCategoryId(categoryList[0].Id);
            ViewBag.Type = typeList;
            return View();
        }

        [HttpPost]
        public ActionResult TypeRegister(int type, int cutline)
        {
            LectureTypeRequirementItem item = new LectureTypeRequirementItem();
            item.LectureTypeId = type;
            item.Cutline = cutline;
            item.AccountId = accountItem.Id;
            
            try
            {
                LectureTypeRequirementDao.Insert(item);
                return Json(new { result = "success" }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { result = "fail", message = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public ActionResult SectionRegister()
        {
            IList<SectionRequirementItem> list = SectionRequirementDao.FindByLectureTypeId();
            ViewBag.Section = list;
            return View();
        }

        [HttpPost]
        public ActionResult SectionRegister(int cutline)
        {
            SectionRequirementItem item = new SectionRequirementItem();
            item.Cutline = cutline;
            item.AccountId = accountItem.Id;
            item.LectureTypeId = 2;

            try
            {
                SectionRequirementDao.Insert(item);
                return Json(new { result = "success" }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { result = "fail", message = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult CategoryUpdate()
        {
            return View();
        }
        public ActionResult TypeUpdate()
        {
            return View();
        }
        public ActionResult SectionUpdate()
        {
            return View();
        }

        public ActionResult LectureTypePartial(int categoryId)
        {
            IList<LectureTypeItem> typeList = LectureTypeDao.FindByCategoryId(categoryId);
            ViewBag.Type = typeList;
            return PartialView("~/Views/Requirement/LectureTypePartial.cshtml");
        }

        public ActionResult Score()
        {
            IList<ScoreRequirementItem> list = ScoreRequirementDao.FindByAccountId(accountItem.Id);
            ViewBag.list = list;
            return View();
        }

        public ActionResult ScoreUpdate()
        {
            return View();
        }

        [HttpGet]
        public ActionResult ScoreRegister()
        {
            return View();
        }

        [HttpPost]
        public ActionResult ScoreRegister(int cutline)
        {
            ScoreRequirementItem item = new ScoreRequirementItem();
            item.Cutline = cutline;
            item.AccountId = accountItem.Id;

            try
            {
                ScoreRequirementDao.Insert(item);
                return Json(new { result = "success" }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { result = "fail", message = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }
	}
}